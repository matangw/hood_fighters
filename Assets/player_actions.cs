//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/player_actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/player_actions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @Player_actions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @Player_actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""player_actions"",
    ""maps"": [
        {
            ""name"": ""player_action_map"",
            ""id"": ""d09a76b7-143a-4941-a20f-ab3a98983895"",
            ""actions"": [
                {
                    ""name"": ""movement"",
                    ""type"": ""Value"",
                    ""id"": ""b41fd922-01fd-44de-b054-8ff7db863844"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""y_aiming"",
                    ""type"": ""Value"",
                    ""id"": ""b11ae11f-6e17-444d-bd2e-5e8717ec915c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""b6a3861b-5d90-48e3-b372-66609fa70ddb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""light_punch"",
                    ""type"": ""Button"",
                    ""id"": ""11cc7f8d-7e5b-440c-94f8-b78468229bf2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""heavy_punch"",
                    ""type"": ""Button"",
                    ""id"": ""c8b5ab5e-8720-4102-90e0-da7ea739a00c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""block"",
                    ""type"": ""Button"",
                    ""id"": ""6e521a02-dbf4-4e19-9f61-9117505f27c0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""d93c3b16-6b22-472b-8298-cc2d276222d1"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""keyboard_movement"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""keyboard_up"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""keyboard_down"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""keyboard_left"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""keyboard_right"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c5de38ce-5d99-4691-b738-ad6f4ddf3915"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""y_aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f61cb9bc-964d-4f1c-9203-576656261bdb"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e789ce5-eb1d-48de-89c7-47309941cf29"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""light_punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a63a04dc-1709-4bf8-b8a8-45dd60789128"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""heavy_punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab711522-35b5-4dba-a6c8-ea8c8da83e1b"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // player_action_map
        m_player_action_map = asset.FindActionMap("player_action_map", throwIfNotFound: true);
        m_player_action_map_movement = m_player_action_map.FindAction("movement", throwIfNotFound: true);
        m_player_action_map_y_aiming = m_player_action_map.FindAction("y_aiming", throwIfNotFound: true);
        m_player_action_map_jump = m_player_action_map.FindAction("jump", throwIfNotFound: true);
        m_player_action_map_light_punch = m_player_action_map.FindAction("light_punch", throwIfNotFound: true);
        m_player_action_map_heavy_punch = m_player_action_map.FindAction("heavy_punch", throwIfNotFound: true);
        m_player_action_map_block = m_player_action_map.FindAction("block", throwIfNotFound: true);
    }

    ~@Player_actions()
    {
        UnityEngine.Debug.Assert(!m_player_action_map.enabled, "This will cause a leak and performance issues, Player_actions.player_action_map.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // player_action_map
    private readonly InputActionMap m_player_action_map;
    private List<IPlayer_action_mapActions> m_Player_action_mapActionsCallbackInterfaces = new List<IPlayer_action_mapActions>();
    private readonly InputAction m_player_action_map_movement;
    private readonly InputAction m_player_action_map_y_aiming;
    private readonly InputAction m_player_action_map_jump;
    private readonly InputAction m_player_action_map_light_punch;
    private readonly InputAction m_player_action_map_heavy_punch;
    private readonly InputAction m_player_action_map_block;
    /// <summary>
    /// Provides access to input actions defined in input action map "player_action_map".
    /// </summary>
    public struct Player_action_mapActions
    {
        private @Player_actions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Player_action_mapActions(@Player_actions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "player_action_map/movement".
        /// </summary>
        public InputAction @movement => m_Wrapper.m_player_action_map_movement;
        /// <summary>
        /// Provides access to the underlying input action "player_action_map/y_aiming".
        /// </summary>
        public InputAction @y_aiming => m_Wrapper.m_player_action_map_y_aiming;
        /// <summary>
        /// Provides access to the underlying input action "player_action_map/jump".
        /// </summary>
        public InputAction @jump => m_Wrapper.m_player_action_map_jump;
        /// <summary>
        /// Provides access to the underlying input action "player_action_map/light_punch".
        /// </summary>
        public InputAction @light_punch => m_Wrapper.m_player_action_map_light_punch;
        /// <summary>
        /// Provides access to the underlying input action "player_action_map/heavy_punch".
        /// </summary>
        public InputAction @heavy_punch => m_Wrapper.m_player_action_map_heavy_punch;
        /// <summary>
        /// Provides access to the underlying input action "player_action_map/block".
        /// </summary>
        public InputAction @block => m_Wrapper.m_player_action_map_block;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_player_action_map; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Player_action_mapActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Player_action_mapActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Player_action_mapActions" />
        public void AddCallbacks(IPlayer_action_mapActions instance)
        {
            if (instance == null || m_Wrapper.m_Player_action_mapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_action_mapActionsCallbackInterfaces.Add(instance);
            @movement.started += instance.OnMovement;
            @movement.performed += instance.OnMovement;
            @movement.canceled += instance.OnMovement;
            @y_aiming.started += instance.OnY_aiming;
            @y_aiming.performed += instance.OnY_aiming;
            @y_aiming.canceled += instance.OnY_aiming;
            @jump.started += instance.OnJump;
            @jump.performed += instance.OnJump;
            @jump.canceled += instance.OnJump;
            @light_punch.started += instance.OnLight_punch;
            @light_punch.performed += instance.OnLight_punch;
            @light_punch.canceled += instance.OnLight_punch;
            @heavy_punch.started += instance.OnHeavy_punch;
            @heavy_punch.performed += instance.OnHeavy_punch;
            @heavy_punch.canceled += instance.OnHeavy_punch;
            @block.started += instance.OnBlock;
            @block.performed += instance.OnBlock;
            @block.canceled += instance.OnBlock;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Player_action_mapActions" />
        private void UnregisterCallbacks(IPlayer_action_mapActions instance)
        {
            @movement.started -= instance.OnMovement;
            @movement.performed -= instance.OnMovement;
            @movement.canceled -= instance.OnMovement;
            @y_aiming.started -= instance.OnY_aiming;
            @y_aiming.performed -= instance.OnY_aiming;
            @y_aiming.canceled -= instance.OnY_aiming;
            @jump.started -= instance.OnJump;
            @jump.performed -= instance.OnJump;
            @jump.canceled -= instance.OnJump;
            @light_punch.started -= instance.OnLight_punch;
            @light_punch.performed -= instance.OnLight_punch;
            @light_punch.canceled -= instance.OnLight_punch;
            @heavy_punch.started -= instance.OnHeavy_punch;
            @heavy_punch.performed -= instance.OnHeavy_punch;
            @heavy_punch.canceled -= instance.OnHeavy_punch;
            @block.started -= instance.OnBlock;
            @block.performed -= instance.OnBlock;
            @block.canceled -= instance.OnBlock;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Player_action_mapActions.UnregisterCallbacks(IPlayer_action_mapActions)" />.
        /// </summary>
        /// <seealso cref="Player_action_mapActions.UnregisterCallbacks(IPlayer_action_mapActions)" />
        public void RemoveCallbacks(IPlayer_action_mapActions instance)
        {
            if (m_Wrapper.m_Player_action_mapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Player_action_mapActions.AddCallbacks(IPlayer_action_mapActions)" />
        /// <seealso cref="Player_action_mapActions.RemoveCallbacks(IPlayer_action_mapActions)" />
        /// <seealso cref="Player_action_mapActions.UnregisterCallbacks(IPlayer_action_mapActions)" />
        public void SetCallbacks(IPlayer_action_mapActions instance)
        {
            foreach (var item in m_Wrapper.m_Player_action_mapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_action_mapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Player_action_mapActions" /> instance referencing this action map.
    /// </summary>
    public Player_action_mapActions @player_action_map => new Player_action_mapActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "player_action_map" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Player_action_mapActions.AddCallbacks(IPlayer_action_mapActions)" />
    /// <seealso cref="Player_action_mapActions.RemoveCallbacks(IPlayer_action_mapActions)" />
    public interface IPlayer_action_mapActions
    {
        /// <summary>
        /// Method invoked when associated input action "movement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMovement(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "y_aiming" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnY_aiming(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "jump" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnJump(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "light_punch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLight_punch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "heavy_punch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHeavy_punch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "block" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnBlock(InputAction.CallbackContext context);
    }
}
